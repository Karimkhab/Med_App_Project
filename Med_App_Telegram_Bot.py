import os
import asyncio

from background import keep_alive
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline
from openai import OpenAI  # ‚úÖ Groq —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI-–∫–ª–∏–µ–Ω—Ç
from dotenv import load_dotenv

from aiogram import F

load_dotenv()
TOKEN = os.getenv("TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")  # ‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á

if not TOKEN or not GROQ_API_KEY:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏–ª–∏ GROQ_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ú–æ–¥–µ–ª—å –¥–ª—è NER
MODEL_NAME = "d4data/biomedical-ner-all"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForTokenClassification.from_pretrained(MODEL_NAME)
nlp = pipeline("ner", model=model, tokenizer=tokenizer, aggregation_strategy="simple")

client = OpenAI(
    api_key=GROQ_API_KEY,
    base_url="https://api.groq.com/openai/v1"  # ‚úÖ Groq endpoint
)

user_languages = {}

def prompt_chooser(lan: str) -> str:
    if lan == "en":
        SYSTEM_PROMPT = """
You are a professional medical assistant. Your task:

1. Analyze the symptoms found in the text.
2. Provide a detailed yet concise and serious response without jokes or fabrications.
3. Indicate only real existing specialists, from 1 to 3, relevant to the symptoms.
4. Never use inappropriate, offensive, or joking words.
5. Do not make a diagnosis.
6. If no symptoms are detected, do not indicate specialists, but give general health maintenance recommendations.
7. Consider that the user may describe both explicit symptoms and general complaints.
8. Format the response neatly and clearly with headings and bullet points.

---

Response format if symptoms are found:

Detected symptoms:
    - [term 1] (type: [category])
    - [term 2] (type: [category])
    ... (if there are many symptoms ‚Äî list them all)

Based on this data, I recommend consulting the following specialists:
    - [specialist 1]
    - [specialist 2]
    - [specialist 3]

Recommendations:
    1. [recommendation 1 ‚Äî brief, clear, and medically neutral]
    2. [recommendation 2] (if any)
    3. [recommendation 3] (not necessarily all three, can be fewer)
"""
    else:
        SYSTEM_PROMPT = """
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ.
2. –í—ã–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∏ —Å–µ—Ä—å—ë–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —à—É—Ç–æ–∫ –∏ –≤—ã–¥—É–º–æ–∫.
3. –£–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –æ—Ç 1 –¥–æ 3, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞–º.
4. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—É–º–µ—Å—Ç–Ω—ã–µ, –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ —à—É—Ç–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞.
5. –ù–µ —Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑.
6. –ï—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∞ –¥–∞–π –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è.
7. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞—Ç—å –∫–∞–∫ —è–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã, —Ç–∞–∫ –∏ –æ–±—â–∏–µ –∂–∞–ª–æ–±—ã.
8. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø—É–Ω–∫—Ç–∞–º–∏.

---

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–∏–º–ø—Ç–æ–º—ã:

–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:
    - [—Ç–µ—Ä–º–∏–Ω 1] (—Ç–∏–ø: [–∫–∞—Ç–µ–≥–æ—Ä–∏—è])
    - [—Ç–µ—Ä–º–∏–Ω 2] (—Ç–∏–ø: [–∫–∞—Ç–µ–≥–æ—Ä–∏—è])
    ... (–µ—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –º–Ω–æ–≥–æ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å–µ)

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º:
    - [—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 1]
    - [—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 2]
    - [—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 3]

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
    1. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1 ‚Äî –∫—Ä–∞—Ç–∫–∞—è, –ø–æ–Ω—è—Ç–Ω–∞—è –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è]
    2. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2] (–µ—Å–ª–∏ –µ—Å—Ç—å)
    3. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3] (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ —Ç—Ä–∏, –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ)
"""
    return SYSTEM_PROMPT



@dp.callback_query(F.data.startswith("lang_"))
async def language_chosen(callback: types.CallbackQuery):
    lang = callback.data.split("_")[1]  # 'en' –∏–ª–∏ 'ru'
    user_languages[callback.from_user.id] = lang

    greetings = {
        'en': "Great! Now you can send me your symptoms description in English.",
        'ru': "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    }
    await callback.message.answer(greetings[lang])
    await callback.answer()  # –£–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏


@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="English üá∫üá∏", callback_data="lang_en"),
            InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
        ]
    ])
    await message.answer(
        "üëã Hello! I will help you identify possible symptoms in your description. But first, please choose the language you want to communicate in.\n\nüëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –≤ —Ç–≤–æ—ë–º –æ–ø–∏—Å–∞–Ω–∏–∏. –ù–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è.",reply_markup=keyboard
    )

# @dp.message(Command("start"))
# async def start(message: types.Message):
#     await message.answer(
#         "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –≤ —Ç–≤–æ–µ–º –æ–ø–∏—Å–∞–Ω–∏–∏. "
#         "–ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç."
#     )


def ask_llm(prompt: str, lang) -> str:
    SYSTEM_PROMPT = prompt_chooser(lang)
    completion = client.chat.completions.create(
        model="llama3-70b-8192",  # ‚úÖ –ú–æ–¥–µ–ª—å –æ—Ç Groq
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
    )
    return completion.choices[0].message.content


@dp.message()
async def analyze_symptoms(message: types.Message):
    lang = user_languages.get(message.from_user.id, 'ru')

    if lang == 'en':
        no_terms_text = "‚ùóÔ∏è No medical terms were detected. Please describe your symptoms in more detail."
        error_text = "üö´ An error occurred during analysis. Please try again later."
        advice_text = "\n\nOur bot ü§ñ provides advice üìù but does not replace a doctor ü©∫. In case of doubts or worsening, consult a specialist."
    else:
        no_terms_text = "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—è–≤–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        error_text = "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        advice_text = "\n\n–ù–∞—à –±–æ—Ç ü§ñ –¥–∞—ë—Ç —Å–æ–≤–µ—Ç—ã üìù, –Ω–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞ ü©∫. –ü—Ä–∏ –ª—é–±—ã—Ö —Å–æ–º–Ω–µ–Ω–∏—è—Ö –∏–ª–∏ —É—Ö—É–¥—à–µ–Ω–∏—è—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."

    try:
        text = message.text
        entities = nlp(text)
        filtered = [ent for ent in entities if ent["entity_group"] != "O"]

        if not filtered:
            await message.answer(no_terms_text)
            return

        terms_text = "\n".join(f"- {ent['word']}" for ent in filtered)
        prompt = f"–ü–∞—Ü–∏–µ–Ω—Ç –æ–ø–∏—Å–∞–ª: {text}\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:\n{terms_text}"

        response = ask_llm(prompt, lang)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîó Official medical resource" if lang == 'en' else "üîó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å",
                url="https://vk.com/video807566_169118280")]
        ])

        await message.answer(response + advice_text, parse_mode="Markdown", reply_markup=keyboard)

    except Exception as e:
        await message.answer(error_text)
        print("–û—à–∏–±–∫–∞:", e)

keep_alive()
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))