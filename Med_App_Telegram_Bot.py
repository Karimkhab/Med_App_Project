import os
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TOKEN")

# Telegram-–±–æ—Ç
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π NER –º–æ–¥–µ–ª–∏
MODEL_NAME = "d4data/biomedical-ner-all"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForTokenClassification.from_pretrained(MODEL_NAME)
nlp = pipeline("ner", model=model, tokenizer=tokenizer, aggregation_strategy="simple")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM —á–µ—Ä–µ–∑ Ollama (–Ω–∞–ø—Ä–∏–º–µ—Ä, Mistral)
client = OpenAI(
    base_url="http://localhost:11434/v1",  # –∞–¥—Ä–µ—Å Ollama
    api_key="ollama"  # —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ.
2. –í—ã–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∏ —Å–µ—Ä—å—ë–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —à—É—Ç–æ–∫ –∏ –≤—ã–¥—É–º–æ–∫.
3. –£–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –æ—Ç 1 –¥–æ 3, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞–º.
4. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—É–º–µ—Å—Ç–Ω—ã–µ, –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ —à—É—Ç–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞.
5. –ù–µ —Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑.
6. –ï—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∞ –¥–∞–π –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è.
7. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞—Ç—å –∫–∞–∫ —è–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã, —Ç–∞–∫ –∏ –æ–±—â–∏–µ –∂–∞–ª–æ–±—ã.
8. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø—É–Ω–∫—Ç–∞–º–∏.

---

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–∏–º–ø—Ç–æ–º—ã:

–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:
    - [—Ç–µ—Ä–º–∏–Ω 1] (—Ç–∏–ø: [–∫–∞—Ç–µ–≥–æ—Ä–∏—è])
    - [—Ç–µ—Ä–º–∏–Ω 2] (—Ç–∏–ø: [–∫–∞—Ç–µ–≥–æ—Ä–∏—è])
    ... (–µ—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –º–Ω–æ–≥–æ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å–µ)

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º:
    - [—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 1]
    - [—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 2] (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - [—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 3] (–µ—Å–ª–∏ –µ—Å—Ç—å)

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
    1. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1 ‚Äî –∫—Ä–∞—Ç–∫–∞—è, –ø–æ–Ω—è—Ç–Ω–∞—è –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è]
    2. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2] (–µ—Å–ª–∏ –µ—Å—Ç—å)
    3. [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3] (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ —Ç—Ä–∏, –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ)
"""


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –≤ —Ç–≤–æ–µ–º –æ–ø–∏—Å–∞–Ω–∏–∏. "
        "–ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç."
    )


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
def ask_llm(prompt: str) -> str:
    completion = client.chat.completions.create(
        model="mistral",
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
    )
    return completion.choices[0].message.content


@dp.message()
async def analyze_symptoms(message: types.Message):
    try:
        text = message.text
        entities = nlp(text)
        filtered = [ent for ent in entities if ent["entity_group"] != "O"]

        if not filtered:
            await message.answer(
                "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—è–≤–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
        terms_text = "\n".join(
            f"- {ent['word']}" for ent in filtered
        )

        prompt = f"–ü–∞—Ü–∏–µ–Ω—Ç –æ–ø–∏—Å–∞–ª: {text}\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:\n{terms_text}"
        response = ask_llm(prompt)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å", url="https://vk.com/video807566_169118280")]
        ])

        await message.answer(response +
            "\n\n–ù–∞—à –±–æ—Ç ü§ñ –¥–∞—ë—Ç —Å–æ–≤–µ—Ç—ã üìù, –Ω–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞ ü©∫. –ü—Ä–∏ –ª—é–±—ã—Ö —Å–æ–º–Ω–µ–Ω–∏—è—Ö –∏–ª–∏ —É—Ö—É–¥—à–µ–Ω–∏—è—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    except Exception as e:
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞:", e)


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))